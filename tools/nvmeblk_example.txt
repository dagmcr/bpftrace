Demonstration of running nvmeblk.

The nvmeblk tool is designed for monitoring alignment during NVMe write
operations. To observe alignment, you can execute the fio tool with the
following sequence, which will produce the corresponding output:

# for i in {0..7}; do bs=$((4 * 2**i)); \
    fio -bs=${bs}k -iodepth=1 -rw=write \
    -ioengine=sync -size=${bs}k -name=sync \
    -direct=1 -filename=/dev/nvme0n1; \
done

The column labeled 'ALIGN' on the rightmost side indicate the maximum alignment
request operation aligns with the LBA and size. In the end, a summary of the
operations is provided, showing the total count of aligned and misaligned
operations, a histogram of the received block sizes, and a list of associated
processes.

# ./tools/nvmeblk.bt
Attaching 3 probes...                                                                                                                                                                      [0/127385]

Tracing NVMe command size... Hit Ctrl-C to end.
DISK      LBA        LEN      OP     COMM             ALIGN
nvme0n1   0          4096     1      fio              4096
nvme0n1   0          8192     1      fio              8192
nvme0n1   0          16384    1      fio              16384
nvme0n1   0          32768    1      fio              32768
nvme0n1   0          65536    1      fio              65536
nvme0n1   0          131072   1      fio              131072
nvme0n1   0          262144   1      fio              262144
nvme0n1   0          524288   1      fio              524288
^C

--------------------------------------------------------------------------------
Tracing completed. Summary:

Aligned operations:
@aligned_op[524288]: 1
@aligned_op[262144]: 2
@aligned_op[131072]: 3
@aligned_op[65536]: 4
@aligned_op[32768]: 5
@aligned_op[16384]: 6
@aligned_op[8192]: 7
@aligned_op[4096]: 8
@naligned_op[8192]: 1
@naligned_op[16384]: 2
@naligned_op[32768]: 3
@naligned_op[65536]: 4
@naligned_op[131072]: 5
@naligned_op[262144]: 6
@naligned_op[524288]: 7

Block size histogram:
@data_len:
[4K, 8K)               1 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|
[8K, 16K)              1 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|
[16K, 32K)             1 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|
[32K, 64K)             1 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|
[64K, 128K)            1 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|
[128K, 256K)           1 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|
[256K, 512K)           1 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|
[512K, 1M)             1 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|


List of processes:
@comm[fio]: 8
--------------------------------------------------------------------------------
